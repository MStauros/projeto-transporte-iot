# docker-compose.test.yml
# Define um ambiente Docker isolado para rodar testes de integração.

services:
  # test-runner - Orquestra e executa os testes Pytest
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      kafka_test: # Sem healthcheck no ambiente de teste, espera apenas o início
        condition: service_started 
      postgres_test: # Sem healthcheck no ambiente de teste, espera apenas o início
        condition: service_started 
      viagem-consumer_test:
        condition: service_started
      viagem-producer_test:
        condition: service_started
    environment: # Variáveis de ambiente que os testes usarão
      KAFKA_BOOTSTRAP_SERVERS: kafka_test:29092
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_HOST: postgres_test
      POSTGRES_PORT: 5432
      POSTGRES_DB: iot
    volumes: # Monta o código para acesso pelos testes
      - ./tests:/app/tests
      - ./src:/app/src
      - ./config:/app/config
    # Comando: espera pelos serviços com wait-for-it.sh e roda o pytest para testes de integração
    command: >
      sh -c "/usr/bin/wait-for-it.sh kafka_test:29092 --timeout=60 --strict -- \
      /usr/bin/wait-for-it.sh postgres_test:5432 --timeout=60 --strict -- \
      pytest /app/tests/integration/test_kafka_integration.py"
    networks:
      - kafka-network_test

  # zookeeper_test - ZooKeeper para o ambiente de teste
  zookeeper_test:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper_test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network_test


  # kafka_test - Kafka Broker para o ambiente de teste
  kafka_test:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka_test
    depends_on:
      zookeeper_test:
        condition: service_started 
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper_test:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_test:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - kafka-network_test

  # postgres_test - PostgreSQL para o ambiente de teste
  postgres_test:
    image: postgres:17
    container_name: postgres_test
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: iot
    networks:
      - kafka-network_test


  # viagem-consumer_test - Consumer para o ambiente de teste
  viagem-consumer_test:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    environment:
      POSTGRES_HOST: postgres_test
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_PORT: 5432
      POSTGRES_DB: iot
      KAFKA_BOOTSTRAP_SERVERS: kafka_test:29092
    depends_on:
      postgres_test:
        condition: service_started 
      kafka_test:
        condition: service_started
    networks:
      - kafka-network_test
    restart: "no"

  # viagem-producer_test - Producer para o ambiente de teste
  viagem-producer_test:
    build:
      context: .
      dockerfile: Dockerfile.producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka_test:29092
    depends_on:
      kafka_test:
        condition: service_started 
    networks:
      - kafka-network_test
    restart: "no"

# Definição da rede exclusiva para o ambiente de teste
networks:
  kafka-network_test:
    driver: bridge