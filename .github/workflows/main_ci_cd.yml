# .github/workflows/main_ci_cd.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Configurar Ambiente Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Instalar Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry --version

    - name: Limpar cache do Poetry (para evitar instalações corrompidas)
      run: poetry cache clear --all pypi

    - name: Instalar dependências com Poetry
      run: poetry install --no-root --no-interaction --no-ansi

    - name: Executar Linting com Black
      run: poetry run black --check .

    - name: Executar Linting com Flake8
      run: poetry run flake8 .

    - name: Executar Linting com Isort
      run: poetry run isort --check-only .

    - name: Rodar Testes Unitários
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: poetry run pytest tests/unit/

    - name: Build da Imagem Docker do Producer
      run: docker build -f Dockerfile.producer -t producer-image:latest .

    - name: Build da Imagem Docker do Consumer
      run: docker build -f Dockerfile.consumer -t consumer-image:latest .

    # --- Etapas de Captura de Logs para Depuração (NOVAS OU MODIFICADAS) ---
    - name: Capturar Logs do Producer de Teste
      if: always() # Garante que esta etapa rode sempre
      run: docker compose -f docker-compose.test.yml -p github-actions-test-env logs viagem-producer_test

    - name: Capturar Logs do Consumer de Teste
      if: always() # Garante que esta etapa rode sempre
      run: docker compose -f docker-compose.test.yml -p github-actions-test-env logs viagem-consumer_test

    - name: Capturar Logs do Kafka de Teste
      if: always() # Garante que esta etapa rode sempre
      run: docker compose -f docker-compose.test.yml -p github-actions-test-env logs kafka_test

    - name: Capturar Logs do Zookeeper de Teste
      if: always() # Garante que esta etapa rode sempre
      run: docker compose -f docker-compose.test.yml -p github-actions-test-env logs zookeeper_test

    - name: Capturar Logs do Postgres de Teste
      if: always() # Garante que esta etapa rode sempre
      run: docker compose -f docker-compose.test.yml -p github-actions-test-env logs postgres_test

    - name: Parar e Remover Ambiente de Teste
      if: always() # Garante que esta etapa rode sempre para limpar o ambiente
      run: docker compose -f docker-compose.test.yml -p github-actions-test-env down -v --rmi all --remove-orphans

  # --- Etapas de CD (comentadas no seu arquivo) ---
  # publish-images:
  #   needs: build-and-test
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout do código
  #   - name: Configurar Docker Buildx
  #   - name: Login no Docker Hub
  #   - name: Build e Push da Imagem do Producer
  #   - name: Build e Push da Imagem do Consumer